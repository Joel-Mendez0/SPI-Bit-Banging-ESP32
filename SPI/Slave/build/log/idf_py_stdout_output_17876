[1/11] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/SPI.c.obj
[2/11] Performing build step for 'bootloader'
[1/1] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.2.2\projects\BitBangingSPISlave\build\bootloader\esp-idf\esptool_py && C:\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.2.2/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 C:/Espressif/frameworks/esp-idf-v5.2.2/projects/BitBangingSPISlave/build/bootloader/bootloader.bin"
Bootloader binary size 0x6870 bytes. 0x790 bytes (7%) free.
[3/9] Building C object esp-idf/main/CMakeFiles/__idf_main.dir/slave.c.obj
[4/9] Linking C static library esp-idf\main\libmain.a
[5/9] Generating ld/sections.ld
[6/9] Linking CXX executable app-template.elf
[7/9] Generating binary image from built executable
esptool.py v4.7.0
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated C:/Espressif/frameworks/esp-idf-v5.2.2/projects/BitBangingSPISlave/build/app-template.bin
[8/9] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.2.2\projects\BitBangingSPISlave\build\esp-idf\esptool_py && C:\Espressif\python_env\idf5.2_py3.11_env\Scripts\python.exe C:/Espressif/frameworks/esp-idf-v5.2.2/components/partition_table/check_sizes.py --offset 0x8000 partition --type app C:/Espressif/frameworks/esp-idf-v5.2.2/projects/BitBangingSPISlave/build/partition_table/partition-table.bin C:/Espressif/frameworks/esp-idf-v5.2.2/projects/BitBangingSPISlave/build/app-template.bin"
app-template.bin binary size 0x2ade0 bytes. Smallest app partition is 0x100000 bytes. 0xd5220 bytes (83%) free.
[8/9] cmd.exe /C "cd /D C:\Espressif\frameworks\esp-idf-v5.2.2\components\esptool_py && C:\Espressif\tools\cmake\3.24.0\bin\cmake.exe -D IDF_PATH=C:/Espressif/frameworks/esp-idf-v5.2.2 -D SERIAL_TOOL=C:/Espressif/python_env/idf5.2_py3.11_env/Scripts/python.exe;;C:/Espressif/frameworks/esp-idf-v5.2.2/components/esptool_py/esptool/esptool.py;--chip;esp32 -D SERIAL_TOOL_ARGS=--before=defesptool.py --chip esp32 -p COM12 -b 460800 --before=default_reset --after=hard_reset write_flash --flash_mode dio --flash_freq 80m --flash_size 4MB 0x1000 bootloader/bootloader.bin 0x10000 app-template.bin 0x8000 partition_table/partition-table.bin
esptool.py v4.7.0
Serial port COM12
Connecting.........
Chip is ESP32-D0WD-V3 (revision v3.1)
Features: WiFi, BT, Dual Core, 240MHz, VRef calibration in efuse, Coding Scheme None
Crystal is 40MHz
MAC: c8:2e:18:26:a5:34
Uploading stub...
Running stub...
Stub running...
Changing baud rate to 460800
Changed.
Configuring flash size...
Flash will be erased from 0x00001000 to 0x00007fff...
Flash will be erased from 0x00010000 to 0x0003afff...
Flash will be erased from 0x00008000 to 0x00008fff...
Compressed 26736 bytes to 16364...
Writing at 0x00001000... (100 %)
Wrote 26736 bytes (16364 compressed) at 0x00001000 in 0.7 seconds (effective 299.4 kbit/s)...
Hash of data verified.
Compressed 175584 bytes to 93788...
Writing at 0x00010000... (16 %)
Writing at 0x0001c03c... (33 %)
Writing at 0x00021b3a... (50 %)
Writing at 0x000275a8... (66 %)
Writing at 0x0002ed75... (83 %)
Writing at 0x00036113... (100 %)
Wrote 175584 bytes (93788 compressed) at 0x00010000 in 2.7 seconds (effective 527.0 kbit/s)...
Hash of data verified.
Compressed 3072 bytes to 103...
Writing at 0x00008000... (100 %)
Wrote 3072 bytes (103 compressed) at 0x00008000 in 0.1 seconds (effective 255.6 kbit/s)...
Hash of data verified.

Leaving...
Hard resetting via RTS pin...
ault_reset;--after=hard_reset;write_flash;@flash_args -D WORKING_DIRECTORY=C:/Espressif/frameworks/esp-idf-v5.2.2/projects/BitBangingSPISlave/build -P C:/Espressif/frameworks/esp-idf-v5.2.2/components/esptool_py/run_serial_tool.cmake"
